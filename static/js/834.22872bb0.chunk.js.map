{"version":3,"file":"static/js/834.22872bb0.chunk.js","mappings":"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","sources":["modules/scaling.js"],"sourcesContent":["import './../css/scaling.css';\nimport React from 'react';\nimport JXG, { COORDS_BY_SCREEN } from 'jsxgraph';\n\nimport { calculateScaledScore } from './results';\n\nimport SUBJECTS from '../data/all_subjects.json';\nimport { getScalingData } from './data';\n  \nconst COLORS = [\n  'steelblue',\n  'orangered',\n  '#05b378', // green\n  'darkviolet',\n  'orange',\n  'brown',\n  'magenta'\n];\n\nconst BOUNDING_BOX = [-9, 103, 113, -6]; // min x, max y, max x, min y\n\nconst LEGEND_WIDTH = 110;\n\nconst SUBJECT_LABELS_ZOOM_THRESHOLD = 1.7;\nconst MOBILE_LEGEND_ZOOM_THRESHOLD = 10;\n\n// replace default font\nJXG.Options.text.cssDefaultStyle = '';\nJXG.Options.text.highlightCssDefaultStyle = '';\n\nexport default class ScalingGraph extends React.Component {\n  componentDidMount() {\n    this.board = JXG.JSXGraph.initBoard(\"jsxgraph\", { \n      axis: true, \n      maxFrameRate: 30,\n      boundingbox: BOUNDING_BOX, \n      maxboundingbox: [-100, 200, 200, -100],\n      showCopyright: false, \n      showInfobox: false,\n      showNavigation: false,\n      zoom: {\n        factorX: 1.25,  // horizontal zoom factor (multiplied to JXG.Board#zoomX)\n        factorY: 1.25,  // vertical zoom factor (multiplied to JXG.Board#zoomY)\n        wheel: true,     // allow zooming by mouse wheel or\n                   // by pinch-to-toom gesture on touch devices\n        needShift: false,   // mouse wheel zooming needs pressing of the shift key\n        min: 1,        // minimal values of JXG.Board#zoomX and JXG.Board#zoomY, limits zoomOut\n        max: 50,       // maximal values of JXG.Board#zoomX and JXG.Board#zoomY, limits zoomIn\n      \n        pinchHorizontal: false, // Allow pinch-to-zoom to zoom only horizontal axis\n        pinchVertical: false,   // Allow pinch-to-zoom to zoom only vertical axis\n        pinchSensitivity: 7    // Sensitivity (in degrees) for recognizing horizontal or vertical pinch-to-zoom gestures.\n      },\n      pan: {\n        enabled: true,   // Allow panning\n        needTwoFingers: false, // panning is done with two fingers on touch devices\n        needShift: false, // mouse panning needs pressing of the shift key\n      }\n    });\n    \n    this.legend = JXG.JSXGraph.initBoard(\"jsxlegend\", { \n      boundingbox: [0, 110, 20, 0], // min x, max y, max x, min y\n      maxFrameRate: 1,\n      registerEvents: false,\n      showCopyright: false, \n      showInfobox: false,\n      showNavigation: false,\n      zoom: {\n        factorX: 1, \n        factorY: 1, \n        wheel: false,    \n        needShift: true, \n        min: 1,      \n        max: 1, \n      \n        pinchHorizontal: false,\n        pinchVertical: false, \n        pinchSensitivity: 7 \n      },\n      pan: {\n        enabled: false,\n        needTwoFingers: true,\n        needShift: true,\n      },\n    }); \n\n    this.addZoomLevelListeners(); // this could be further optimised by only updating subject label listener, not whole legend listener\n    this.createMouseCoordinates();\n\n    this.originalObjects = [...this.board.objectsList]; // this needs to be after the mouse coordinates is created so it is preserved\n    this.points = [];\n    this.subjects = [];\n\n    this.componentDidUpdate();\n  }\n\n  clearBoard() {\n    let objectsList = [...this.board.objectsList];\n    for (let index = objectsList.length - 1; index >= 0; index -= 1) {\n      let object = objectsList[index];\n      if (object.elType === \"line\" || object.elType === \"curve\" || (object.elType === \"text\" && object.htmlStr.length > 3) || (object.elType === \"point\" && object.Xjc !== null) || !this.originalObjects.includes(object))\n        this.board.removeObject(object.id);\n    }\n  }\n\n  plotScalingFunctions() {\n    for (let [subjectIndex, subjectCode] of this.subjects.entries()) {\n      // create function\n      const scalingData = getScalingData(this.props.year);\n      let a = scalingData[subjectCode][\"a\"];\n      let b = scalingData[subjectCode][\"b\"];\n      let c = scalingData[subjectCode][\"c\"];\n      let subjectFunction = this.board.create('functiongraph', [function(x){\n        return (a / (1 + Math.exp(-b * (x - c))));\n      }, 0, 100], {strokeColor: COLORS[subjectIndex % COLORS.length]});   // modulus ensures colours repeat if exhausted\n      subjectFunction.hasPoint = function(x, y) {return false;}; // disable highlighting\n    }\n  }\n\n  clearLegend() {\n    let legendObjectsList = [...this.legend.objectsList];\n    for (let index = legendObjectsList.length - 1; index >= 0; index -= 1) {\n      let object = legendObjectsList[index];\n      this.legend.removeObject(object.id);\n    }\n  }\n\n  createLegend() {\n    let subjectsNames = this.subjects.map((subjectCode) => {return SUBJECTS[subjectCode]});\n    let longestSubjectName = subjectsNames.reduce((subject1, subject2) => {return (subject1.length > subject2.length) ? subject1 : subject2});\n    let numLines = Math.ceil(longestSubjectName.length / 12);\n    let rowHeight = numLines * 9 + 10;\n\n    let legend = this.legend.create('legend', [0, 100], {labels: subjectsNames, colors: COLORS, rowHeight: rowHeight} );\n\n    let legendHeight = legend.lines.at(-1).getTextAnchor().scrCoords.at(-1) + rowHeight + this.maxWidth / 30;\n    document.getElementById('jsxlegend').style.top = `${this.graphHeight - legendHeight}px`;\n    this.legend.resizeContainer(LEGEND_WIDTH, legendHeight, false, true);\n  }\n\n  plotPoints() {\n    // determine whether to show the points, at the current zoom level\n    let boundingBox = this.board.getBoundingBox();\n    let zoomFactor = (BOUNDING_BOX[2] - BOUNDING_BOX[0]) / (boundingBox[2] - boundingBox[0]);\n    let showLabels = (zoomFactor >= SUBJECT_LABELS_ZOOM_THRESHOLD);\n\n    for (let subjectCode of this.subjects) {\n      // plot raw score input\n      let rawScore = this.props.subjects[subjectCode];\n      if (rawScore) {\n        let scaledScore = calculateScaledScore(rawScore, subjectCode, this.props.year);\n        let point = this.board.create('point', [rawScore, scaledScore], {face: \"cross\", name: SUBJECTS[subjectCode], withLabel: true});\n        point.label.setAttribute({offset: [10, -4]});\n        if (!showLabels) point.setAttribute({withLabel: false});\n        point.hasPoint = function(x, y) {return false;}; // disable highlighting\n        this.points.push(point);\n      }\n    }\n  }\n\n  // static method\n  zoomFactorChange(zoomFactor, previousZoomFactor, thresholdZoomFactor) {\n    // tests whether the zoom factor has crossed the threshold (for optimisation purposes so no redundant attribute setting)\n    if (zoomFactor >= thresholdZoomFactor) {\n      return previousZoomFactor < thresholdZoomFactor;\n    } else {\n      return previousZoomFactor > thresholdZoomFactor;\n    }\n  }\n\n  addZoomLevelListeners() {\n    // show/hide labels and/or legend depending on zoom level\n    let previousZoomFactor = 1;\n    this.board.on('boundingbox', () => {\n      let boundingBox = this.board.getBoundingBox();\n      let zoomFactor = (BOUNDING_BOX[2] - BOUNDING_BOX[0]) / (boundingBox[2] - boundingBox[0]);\n      \n      // show/hide subject labels\n      if (this.zoomFactorChange(zoomFactor, previousZoomFactor, SUBJECT_LABELS_ZOOM_THRESHOLD)) {\n        this.board.suspendUpdate();\n        let showLabels = (zoomFactor >= SUBJECT_LABELS_ZOOM_THRESHOLD);\n        for (let point of this.points) {\n          point.setAttribute({withLabel: showLabels});\n        }\n        this.board.unsuspendUpdate();\n      }\n      \n      // show/hide legend (only for mobile)\n      if (this.isMobile && this.zoomFactorChange(zoomFactor, previousZoomFactor, MOBILE_LEGEND_ZOOM_THRESHOLD)) {\n        document.getElementById('jsxlegend').style.display = (zoomFactor >= MOBILE_LEGEND_ZOOM_THRESHOLD) ? 'none' : ''; // none is hidden, blank is shown\n      }\n\n      previousZoomFactor = zoomFactor;\n    }); \n  }\n\n  createMouseCoordinates() {\n     // create coordinates at mouse\n     let mouseCoordinates = this.board.create('point', [0, 0], {\n      visible: false,\n      fixed: true,\n      size: 2, \n      fillColor: 'black', \n      highlightFillColor: 'black', \n      fillOpacity: 0.7, \n      highlightFillOpacity: 0.7, \n      highlightStrokeWidth: 0,\n      strokeWidth: 0,   // disable stroke so only fill is considered\n      precision: {  // ensures always highlighted\n        touch: 0,\n        mouse: 0,\n        pen: 0\n      }\n    });\n    mouseCoordinates.label.setAttribute({offset: [7, 13]}); // set offset of coordinates at mouse\n\n    // update position of mouse coordinates\n    let previousCoordinates = [0, 0];   // tracks whether there has been a change in coordinates (only update on change for optimisation)\n    let previouslyVisible = false;      // tracks whether coordinates were previously shown (for optimisation)\n    let updateMouseCoordinates = () => {\n      if (this.subjects.length < 1) return false;\n\n      let coords = new JXG.Coords(COORDS_BY_SCREEN, this.board.getMousePosition(), this.board).usrCoords.slice(1);\n      let nearestX = Math.round(coords[0]);\n\n      if (nearestX >= -1 && nearestX <= 101) {\n        // adds leeway so you don't have to get exactly 0 or 100\n        if (nearestX <= 0) nearestX = 0;\n        if (nearestX >= 100) nearestX = 100;  \n\n        // pick the closest subject to select\n        let closestSubject = this.subjects.reduce((subjectCode1, subjectCode2) => {  // get the subject with raw score closest to the cursor\n          return (Math.abs(calculateScaledScore(nearestX, subjectCode1, this.props.year) - coords[1]) < Math.abs(calculateScaledScore(nearestX, subjectCode2, this.props.year) - coords[1])) ? subjectCode1 : subjectCode2;\n        })\n        let nearestY = calculateScaledScore(nearestX, closestSubject, this.props.year);\n\n        // show coordinates if previously hidden\n        if (!previouslyVisible) {\n          this.board.suspendUpdate();\n          mouseCoordinates.showElement();\n          previouslyVisible = true;\n        }\n\n        // only update if the coordinates have actually changed\n        let coordinates = [nearestX, nearestY];\n        if (nearestX === previousCoordinates[0] && nearestY === previousCoordinates[1]) return false;\n        previousCoordinates = coordinates;\n        \n        // move the point to the mouse and update it's name to be it's coordinate\n        this.board.suspendUpdate();\n        mouseCoordinates.moveTo(coordinates);\n        mouseCoordinates.setAttribute({name: `(${nearestX.toFixed(0)}, ${nearestY.toFixed(2)})`})\n        this.board.unsuspendUpdate();\n      } else {\n        if (previouslyVisible) {\n          mouseCoordinates.hideElement();\n          previouslyVisible = false;\n        }\n      }\n    }\n    this.board.on('touchstart', updateMouseCoordinates);\n    this.board.on('pointermove', updateMouseCoordinates);\n  }\n\n  clearPoints() {\n    // clear the points which show the raw score inputted but not the graphs. useful if only the raw score changes and not the subjects\n    let objectsList = [...this.board.objectsList];\n    for (let index = objectsList.length - 1; index >= 0; index -= 1) {\n      let object = objectsList[index];\n      if ((object.elType === \"point\" && object.Xjc !== null))\n        this.board.removeObject(object.id);\n    }\n  }\n\n  componentDidUpdate() {\n    this.board.suspendUpdate();\n    this.legend.suspendUpdate();\n\n    let previousSubjects = [...this.subjects];\n    this.subjects = Object.keys(this.props.subjects).filter((subjectCode) => {return this.props.subjects[subjectCode] !== undefined}); // this is a list, whereas this.props.subjects is an object\n    this.subjectsHaveChanged = !(JSON.stringify(previousSubjects) === JSON.stringify(this.subjects));\n    \n    if (this.subjectsHaveChanged) {\n      this.clearBoard();\n      if (this.subjects.length > 0) this.plotScalingFunctions();\n      this.clearLegend();\n      if (this.subjects.length > 0) this.createLegend();\n    } else {\n      this.clearPoints();\n    }\n    this.plotPoints();\n\n    this.board.unsuspendUpdate();\n    this.legend.unsuspendUpdate();\n  }\n\n  render() {\n    this.isMobile = this.maxWidth < 400;\n\n    this.maxWidth = document.querySelector('.section-inner').getBoundingClientRect().width;\n    this.graphHeight = Math.abs(this.maxWidth * (BOUNDING_BOX[1] - BOUNDING_BOX[3]) / (BOUNDING_BOX[2] - BOUNDING_BOX[0]));  // ensures that 1x1 aspect ratio is maintained\n    \n    return(\n      <div style={{position: \"relative\"}}>\n        <div id=\"jsxgraph\" style={{width: this.maxWidth, height: this.graphHeight}}></div>\n        <div id=\"jsxlegend\" style={{position: \"absolute\", top: this.graphHeight - 250 /* estimate, will be accurately calculated later */, right: 0, width: LEGEND_WIDTH, height: this.graphHeight, zIndex: -1}}></div>\n      </div>\n    );\n  }\n}"],"names":["COLORS","BOUNDING_BOX","JXG","ScalingGraph","this","board","axis","maxFrameRate","boundingbox","maxboundingbox","showCopyright","showInfobox","showNavigation","zoom","factorX","factorY","wheel","needShift","min","max","pinchHorizontal","pinchVertical","pinchSensitivity","pan","enabled","needTwoFingers","legend","registerEvents","addZoomLevelListeners","createMouseCoordinates","originalObjects","objectsList","points","subjects","componentDidUpdate","index","length","object","elType","htmlStr","Xjc","includes","removeObject","id","entries","subjectIndex","subjectCode","scalingData","getScalingData","props","year","a","b","c","create","x","Math","exp","strokeColor","hasPoint","y","legendObjectsList","subjectsNames","map","SUBJECTS","longestSubjectName","reduce","subject1","subject2","rowHeight","ceil","legendHeight","labels","colors","lines","at","getTextAnchor","scrCoords","maxWidth","document","getElementById","style","top","graphHeight","resizeContainer","boundingBox","getBoundingBox","showLabels","rawScore","scaledScore","calculateScaledScore","point","face","name","withLabel","label","setAttribute","offset","push","zoomFactor","previousZoomFactor","thresholdZoomFactor","on","zoomFactorChange","suspendUpdate","unsuspendUpdate","isMobile","display","mouseCoordinates","visible","fixed","size","fillColor","highlightFillColor","fillOpacity","highlightFillOpacity","highlightStrokeWidth","strokeWidth","precision","touch","mouse","pen","previousCoordinates","previouslyVisible","updateMouseCoordinates","coords","COORDS_BY_SCREEN","getMousePosition","usrCoords","slice","nearestX","round","closestSubject","subjectCode1","subjectCode2","abs","nearestY","showElement","coordinates","moveTo","toFixed","hideElement","previousSubjects","Object","keys","filter","undefined","subjectsHaveChanged","JSON","stringify","clearBoard","plotScalingFunctions","clearLegend","createLegend","clearPoints","plotPoints","querySelector","getBoundingClientRect","width","position","height","right","zIndex","React"],"sourceRoot":""}