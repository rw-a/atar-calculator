{"version":3,"sources":["modules/scaling.js"],"names":["COLORS","BOUNDING_BOX","JXG","Options","text","cssDefaultStyle","highlightCssDefaultStyle","ScalingGraph","_React$Component","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","_createClass","key","value","board","JSXGraph","initBoard","axis","maxFrameRate","boundingbox","maxboundingbox","showCopyright","showInfobox","zoom","factorX","factorY","wheel","needShift","min","max","pinchHorizontal","pinchVertical","pinchSensitivity","pan","enabled","needTwoFingers","navbar","strokeColor","fillColor","highlightFillColor","padding","position","fontSize","cursor","zIndex","right","bottom","legend","registerEvents","showNavigation","addZoomLevelListeners","createMouseCoordinates","originalObjects","_toConsumableArray","objectsList","points","subjects","year","componentDidUpdate","index","length","object","elType","htmlStr","visProp","cssclass","Xjc","includes","removeObject","id","_step","_this","_iterator","_createForOfIteratorHelper","entries","_loop","_ref","subjectIndex","_ref2","_slicedToArray","subjectCode","scalingData","getScalingData","props","a","b","create","x","Math","exp","hasPoint","y","s","n","done","err","e","f","legendObjectsList","subjectsNames","map","SUBJECTS","longestSubjectName","reduce","subject1","subject2","rowHeight","ceil","legendHeight","labels","colors","lines","at","getTextAnchor","scrCoords","maxWidth","document","getElementById","style","top","concat","graphHeight","resizeContainer","_step2","boundingBox","getBoundingBox","showLabels","_iterator2","rawScore","scaledScore","calculateScaledScore","point","face","name","withLabel","label","setAttribute","offset","push","_this2","subjectsWithLabels","previousZoomFactor","on","zoomFactor","toFixed","autoHideSubjectLabels","isMobile","thresholdZoomFactor","zoomFactorChange","display","_this3","getCoordinate","coords","rendNode","offsetWidth","offsetHeight","isFreeSpace","coordinate","occupiedCoordinates","_step3","_coordinate","xCoord","yCoord","width","height","_iterator3","_ref3","_ref4","minX","minY","maxHeight","_step4","_iterator4","suspendUpdate","_step5","_iterator5","unshift","hasLabel","_step6","_iterator6","_loop2","otherCoordinates","filter","coord","subject","unsuspendUpdate","_this4","mouseCoordinates","visible","fixed","size","fillOpacity","highlightFillOpacity","highlightStrokeWidth","strokeWidth","precision","touch","mouse","pen","cssClass","previousCoordinates","previouslyVisible","updateMouseCoordinates","Coords","COORDS_BY_SCREEN","getMousePosition","usrCoords","slice","nearestX","round","closestSubject","subjectCode1","subjectCode2","abs","nearestY","showElement","coordinates","moveTo","hideElement","_this5","previousSubjects","Object","keys","undefined","subjectsHaveChanged","JSON","stringify","clearBoard","plotScalingFunctions","clearLegend","createLegend","clearPoints","plotPoints","querySelector","getBoundingClientRect","React","createElement","Component"],"mappings":"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","file":"static/js/1.1de2eff4.chunk.js","sourcesContent":["import './../css/scaling.css';\nimport React from 'react';\nimport JXG, { COORDS_BY_SCREEN } from 'jsxgraph';\n\nimport { calculateScaledScore } from './results';\n\nimport SUBJECTS from '../data/all_subjects.json';\nimport { getScalingData } from './data';\n  \nconst COLORS = [\n  'steelblue',\n  'orangered',\n  '#05b378', // green\n  'darkviolet',\n  'orange',\n  'brown',\n  'magenta'\n];\n\nconst BOUNDING_BOX = [-9, 103, 113, -6]; // min x, max y, max x, min y\n\nconst LEGEND_WIDTH = 110;\n\nconst SUBJECT_LABELS_ZOOM_THRESHOLD = 1.7;\nconst MOBILE_LEGEND_ZOOM_THRESHOLD = 10;\n\n// replace default font\nJXG.Options.text.cssDefaultStyle = 'z-index: 0';\nJXG.Options.text.highlightCssDefaultStyle = '';\n\nexport default class ScalingGraph extends React.Component {\n  componentDidMount() {\n    this.board = JXG.JSXGraph.initBoard(\"jsxgraph\", { \n      axis: true, \n      maxFrameRate: 30,\n      boundingbox: BOUNDING_BOX, \n      maxboundingbox: [-100, 200, 200, -100],\n      showCopyright: false, \n      showInfobox: false,\n      // showNavigation: false,\n      zoom: {\n        factorX: 1.25,  // horizontal zoom factor (multiplied to JXG.Board#zoomX)\n        factorY: 1.25,  // vertical zoom factor (multiplied to JXG.Board#zoomY)\n        wheel: true,     // allow zooming by mouse wheel or\n                   // by pinch-to-toom gesture on touch devices\n        needShift: false,   // mouse wheel zooming needs pressing of the shift key\n        min: 1,        // minimal values of JXG.Board#zoomX and JXG.Board#zoomY, limits zoomOut\n        max: 50,       // maximal values of JXG.Board#zoomX and JXG.Board#zoomY, limits zoomIn\n      \n        pinchHorizontal: false, // Allow pinch-to-zoom to zoom only horizontal axis\n        pinchVertical: false,   // Allow pinch-to-zoom to zoom only vertical axis\n        pinchSensitivity: 7    // Sensitivity (in degrees) for recognizing horizontal or vertical pinch-to-zoom gestures.\n      },\n      pan: {\n        enabled: true,   // Allow panning\n        needTwoFingers: false, // panning is done with two fingers on touch devices\n        needShift: false, // mouse panning needs pressing of the shift key\n      },\n      navbar:  {\n        strokeColor: '#333333',\n        fillColor: 'transparent',\n        highlightFillColor: '#aaaaaa',\n        padding: '0px',\n        position: 'absolute',\n        fontSize: '14px',\n        cursor: 'pointer',\n        zIndex: '100',\n        right: '5px',\n        bottom: '0px',\n      }\n    });\n    \n    this.legend = JXG.JSXGraph.initBoard(\"jsxlegend\", { \n      boundingbox: [0, 120, 20, 0], // min x, max y, max x, min y\n      maxFrameRate: 1,\n      registerEvents: false,\n      showCopyright: false, \n      showInfobox: false,\n      showNavigation: false,\n      zoom: {\n        factorX: 1, \n        factorY: 1, \n        wheel: false,    \n        needShift: true, \n        min: 1,      \n        max: 1, \n      \n        pinchHorizontal: false,\n        pinchVertical: false, \n        pinchSensitivity: 7 \n      },\n      pan: {\n        enabled: false,\n        needTwoFingers: true,\n        needShift: true,\n      },\n    }); \n\n    this.addZoomLevelListeners(); // this could be further optimised by only updating subject label listener, not whole legend listener\n    this.createMouseCoordinates();\n\n    this.originalObjects = [...this.board.objectsList]; // this needs to be after the mouse coordinates is created so it is preserved\n    this.points = [];\n    this.subjects = [];\n    this.year = 2022;\n\n    this.componentDidUpdate();\n  }\n\n  clearBoard() {\n    let objectsList = [...this.board.objectsList];\n    for (let index = objectsList.length - 1; index >= 0; index -= 1) {\n      let object = objectsList[index];\n      if (object.elType === \"line\" || object.elType === \"curve\" || (object.elType === \"text\" && object.htmlStr.length > 3 && object.visProp.cssclass !== \"mouseCoordinates\") || (object.elType === \"point\" && object.Xjc !== null) || !this.originalObjects.includes(object))\n        this.board.removeObject(object.id);\n    }\n  }\n\n  plotScalingFunctions() {\n    for (let [subjectIndex, subjectCode] of this.subjects.entries()) {  // entries on a list does enumerate\n      // create function\n      const scalingData = getScalingData(this.props.year);\n      let a = scalingData[subjectCode][\"a\"];\n      let b = scalingData[subjectCode][\"b\"];\n      let subjectFunction = this.board.create('functiongraph', [function(x){\n        return (100 / (1 + Math.exp(-a * (x - b))));\n      }, 0, 100], {strokeColor: COLORS[subjectIndex % COLORS.length]});   // modulus ensures colours repeat if exhausted\n      subjectFunction.hasPoint = function(x, y) {return false;}; // disable highlighting\n    }\n  }\n\n  clearLegend() {\n    let legendObjectsList = [...this.legend.objectsList];\n    for (let index = legendObjectsList.length - 1; index >= 0; index -= 1) {\n      let object = legendObjectsList[index];\n      this.legend.removeObject(object.id);\n    }\n  }\n\n  createLegend() {\n    let subjectsNames = this.subjects.map((subjectCode) => {return SUBJECTS[subjectCode]});\n    let longestSubjectName = subjectsNames.reduce((subject1, subject2) => {return (subject1.length > subject2.length) ? subject1 : subject2});\n    let numLines = Math.ceil(longestSubjectName.length / 12);\n    let rowHeight = numLines * 9 + 10;\n\n    let legend = this.legend.create('legend', [0, 100], {labels: subjectsNames, colors: COLORS, rowHeight: rowHeight} );\n\n    let legendHeight = legend.lines.at(-1).getTextAnchor().scrCoords.at(-1) + rowHeight + this.maxWidth / 30;\n    document.getElementById('jsxlegend').style.top = `${this.graphHeight - legendHeight}px`;\n    this.legend.resizeContainer(LEGEND_WIDTH, legendHeight, false, true);\n  }\n\n  plotPoints() {\n    // determine whether to show the points, at the current zoom level\n    let boundingBox = this.board.getBoundingBox();\n    let zoomFactor = (BOUNDING_BOX[2] - BOUNDING_BOX[0]) / (boundingBox[2] - boundingBox[0]);\n    let showLabels = (zoomFactor >= SUBJECT_LABELS_ZOOM_THRESHOLD);\n\n    for (let subjectCode of this.subjects) {\n      // plot raw score input\n      let rawScore = this.props.subjects[subjectCode];\n      if (rawScore) {\n        let scaledScore = calculateScaledScore(rawScore, subjectCode, this.props.year);\n        let point = this.board.create('point', [rawScore, scaledScore], {face: \"cross\", name: SUBJECTS[subjectCode], withLabel: true});\n        point.label.setAttribute({offset: [10, -4]});\n        if (!showLabels) point.setAttribute({withLabel: false});\n        point.hasPoint = function(x, y) {return false;}; // disable highlighting\n        this.points.push(point);\n      }\n    }\n  }\n\n  addZoomLevelListeners() {\n    function zoomFactorChange(zoomFactor, previousZoomFactor, thresholdZoomFactor) {\n      // tests whether the zoom factor has crossed the threshold (for optimisation purposes so no redundant attribute setting)\n      if (zoomFactor >= thresholdZoomFactor) {\n        return previousZoomFactor < thresholdZoomFactor;\n      } else {\n        return previousZoomFactor > thresholdZoomFactor;\n      }\n    }\n\n    this.subjectsWithLabels = [];   // a list of points whose labels are visible\n\n    // show/hide labels and/or legend depending on zoom level\n    let previousZoomFactor = 0;   // set to zero so there is always a change in zoom at the start\n    this.board.on('boundingbox', () => {\n      const boundingBox = this.board.getBoundingBox();\n      const zoomFactor = (BOUNDING_BOX[2] - BOUNDING_BOX[0]) / (boundingBox[2] - boundingBox[0]);\n      if (zoomFactor.toFixed(3) === previousZoomFactor.toFixed(3)) return;  // only update if the zoom level changes (rounded due to imprecision)\n      \n      this.autoHideSubjectLabels();\n\n      // show/hide legend once zoomed in enough (only for mobile)\n      if (this.isMobile && zoomFactorChange(zoomFactor, previousZoomFactor, MOBILE_LEGEND_ZOOM_THRESHOLD)) {\n        document.getElementById('jsxlegend').style.display = (zoomFactor >= MOBILE_LEGEND_ZOOM_THRESHOLD) ? 'none' : ''; // none is hidden, blank is shown\n      }\n\n      previousZoomFactor = zoomFactor;\n    }); \n  }\n\n  autoHideSubjectLabels() {\n    // returns a tuple representing a rectangle of space [x, y, width, height]\n    function getCoordinate(point) {\n      /* These values include the point itself (whereas the current versions do not) so a larger area is considered occupied\n      const xCoord = point.coords.scrCoords[1];\n      const yCoord = point.coords.scrCoords[2];\n      const width =  point.label.rendNode.offsetWidth + Math.abs(point.label.visProp.offset[0]);\n      const height = point.label.rendNode.offsetHeight + Math.abs(point.label.visProp.offset[1]);   // only works because text below point\n      */\n\n      const xCoord = point.label.coords.scrCoords[1];\n      const yCoord = point.label.coords.scrCoords[2];\n      const width =  point.label.rendNode.offsetWidth;\n      const height = point.label.rendNode.offsetHeight;\n      return [xCoord, yCoord, width, height];\n    }\n    \n    // only show labels if they don't overlap with others\n    function isFreeSpace(coordinate, occupiedCoordinates) {\n      const [xCoord, yCoord, width, height] = coordinate;\n      for (const [minX, minY, maxWidth, maxHeight] of occupiedCoordinates) {\n        const xCollision = (\n          (xCoord >= minX && xCoord <= minX + maxWidth) || (xCoord + width >= minX && xCoord + width <= minX + maxWidth)  || // check if xCoord is within occupied space\n          (minX >= xCoord && minX <= xCoord + width) || (minX + maxWidth >= xCoord && minX + maxWidth <= xCoord + width)     // check if occupied coordinate is within xCoord\n        );\n        const yCollision = (\n          (yCoord >= minY && yCoord <= minY + maxHeight) || (yCoord + height >= minY && yCoord + height <= minY + maxHeight) ||\n          (minY >= yCoord && minY <= yCoord + height) || (minY + maxHeight >= yCoord && minY + maxHeight <= yCoord + height)\n          );\n        if (xCollision && yCollision) return false;\n      }\n      return true;\n    }\n\n\n    let occupiedCoordinates = []; // a list of coordinate tuples that tracks which spaces are being occupied by labels\n    // compute which spaces are occupied\n    for (let point of this.subjectsWithLabels) {\n      occupiedCoordinates.push(getCoordinate(point));\n    }\n\n    this.board.suspendUpdate();\n\n    // first try to add new subject labels if there's space\n    for (let point of this.points) {\n      if (this.subjectsWithLabels.includes(point)) continue;\n\n      const coordinate = getCoordinate(point);\n      \n      if (this.subjectsWithLabels.length < 1 || isFreeSpace(coordinate, occupiedCoordinates)) {\n        point.setAttribute({withLabel: true});\n        this.subjectsWithLabels.unshift(point);\n        occupiedCoordinates.push(coordinate);\n      } else {\n        if (point.hasLabel) point.setAttribute({withLabel: false});\n      }\n    }\n\n    // then delete subject labels if it's too full\n    for (let point of this.subjectsWithLabels) {\n      const coordinate = getCoordinate(point);\n      const otherCoordinates = occupiedCoordinates.filter((coord) => {return coord[0] !== coordinate[0] || coord[1] !== coordinate[1] || coord[2] !== coordinate[2] || coord[3] !== coordinate[3];});\n      if (!isFreeSpace(coordinate, otherCoordinates)) {\n        point.setAttribute({withLabel: false});\n        occupiedCoordinates = otherCoordinates;\n        this.subjectsWithLabels = this.subjectsWithLabels.filter((subject) => {return subject !== point});\n      }\n    }\n\n    this.board.unsuspendUpdate();\n  }\n\n  createMouseCoordinates() {\n     // create coordinates at mouse\n     let mouseCoordinates = this.board.create('point', [0, 0], {\n      visible: false,\n      fixed: true,\n      size: 2, \n      fillColor: 'black', \n      highlightFillColor: 'black', \n      fillOpacity: 0.7, \n      highlightFillOpacity: 0.7, \n      highlightStrokeWidth: 0,\n      strokeWidth: 0,   // disable stroke so only fill is considered\n      precision: {  // ensures always highlighted\n        touch: 0,\n        mouse: 0,\n        pen: 0\n      }\n    });\n    mouseCoordinates.label.setAttribute({offset: [7, 13]}); // set offset of coordinates at mouse\n    mouseCoordinates.label.setAttribute({cssClass: \"mouseCoordinates\"});\n\n    // update position of mouse coordinates\n    let previousCoordinates = [0, 0];   // tracks whether there has been a change in coordinates (only update on change for optimisation)\n    let previouslyVisible = false;      // tracks whether coordinates were previously shown (for optimisation)\n    let updateMouseCoordinates = () => {\n      if (this.subjects.length < 1) return false;\n\n      let coords = new JXG.Coords(COORDS_BY_SCREEN, this.board.getMousePosition(), this.board).usrCoords.slice(1);\n      let nearestX = Math.round(coords[0]);\n\n      if (nearestX >= -1 && nearestX <= 101) {\n        // adds leeway so you don't have to get exactly 0 or 100\n        if (nearestX <= 0) nearestX = 0;\n        if (nearestX >= 100) nearestX = 100;  \n\n        // pick the closest subject to select\n        let closestSubject = this.subjects.reduce((subjectCode1, subjectCode2) => {  // get the subject with raw score closest to the cursor\n          return (Math.abs(calculateScaledScore(nearestX, subjectCode1, this.props.year) - coords[1]) < Math.abs(calculateScaledScore(nearestX, subjectCode2, this.props.year) - coords[1])) ? subjectCode1 : subjectCode2;\n        })\n        let nearestY = calculateScaledScore(nearestX, closestSubject, this.props.year);\n\n        // show coordinates if previously hidden\n        if (!previouslyVisible) {\n          this.board.suspendUpdate();\n          mouseCoordinates.showElement();\n          previouslyVisible = true;\n        }\n\n        // only update if the coordinates have actually changed\n        let coordinates = [nearestX, nearestY];\n        if (nearestX === previousCoordinates[0] && nearestY === previousCoordinates[1]) return false;\n        previousCoordinates = coordinates;\n        \n        // move the point to the mouse and update it's name to be it's coordinate\n        this.board.suspendUpdate();\n        mouseCoordinates.moveTo(coordinates);\n        mouseCoordinates.setAttribute({name: `(${nearestX.toFixed(0)}, ${nearestY.toFixed(2)})`});\n        this.board.unsuspendUpdate();\n      } else {\n        if (previouslyVisible) {\n          mouseCoordinates.hideElement();\n          previouslyVisible = false;\n        }\n      }\n    }\n    this.board.on('touchstart', updateMouseCoordinates);\n    this.board.on('pointermove', updateMouseCoordinates);\n  }\n\n  clearPoints() {\n    // clear the points which show the raw score inputted but not the graphs. useful if only the raw score changes and not the subjects\n    this.points = [];\n    this.subjectsWithLabels = [];\n\n    let objectsList = [...this.board.objectsList];\n    for (let index = objectsList.length - 1; index >= 0; index -= 1) {\n      let object = objectsList[index];\n      if ((object.elType === \"point\" && object.Xjc !== null))\n        this.board.removeObject(object.id);\n    }\n  }\n\n  componentDidUpdate() {\n    this.board.suspendUpdate();\n    this.legend.suspendUpdate();\n\n    let previousSubjects = [...this.subjects];\n    this.subjects = Object.keys(this.props.subjects).filter((subjectCode) => {return this.props.subjects[subjectCode] !== undefined}); // this is a list, whereas this.props.subjects is an object\n    this.subjectsHaveChanged = !(JSON.stringify(previousSubjects) === JSON.stringify(this.subjects));\n    \n    if (this.subjectsHaveChanged || this.year !== this.props.year) {\n      this.year = this.props.year;  // track the year that was previously to check whether the year has changed\n      this.clearBoard();\n      if (this.subjects.length > 0) this.plotScalingFunctions();\n    }\n    if (this.subjectsHaveChanged) {\n      this.clearLegend();\n      if (this.subjects.length > 0) this.createLegend();\n    }\n\n    this.clearPoints();\n    this.plotPoints();\n    this.autoHideSubjectLabels();\n\n    this.board.unsuspendUpdate();\n    this.legend.unsuspendUpdate();\n  }\n\n  render() {\n    this.isMobile = this.maxWidth < 400;\n\n    this.maxWidth = document.querySelector('.section-inner').getBoundingClientRect().width;\n    this.graphHeight = Math.abs(this.maxWidth * (BOUNDING_BOX[1] - BOUNDING_BOX[3]) / (BOUNDING_BOX[2] - BOUNDING_BOX[0]));  // ensures that 1x1 aspect ratio is maintained\n    \n    return(\n      <div style={{position: \"relative\"}}>\n        <div id=\"jsxgraph\" style={{width: this.maxWidth, height: this.graphHeight}}></div>\n        <div id=\"jsxlegend\" style={{position: \"absolute\", top: this.graphHeight - 250 /* estimate, will be accurately calculated later */, right: 0, width: LEGEND_WIDTH, height: this.graphHeight, zIndex: -1}}></div>\n      </div>\n    );\n  }\n}"],"sourceRoot":""}